<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/util https://www.springframework.org/schema/util/spring-util.xsd">


    <bean id="saxophone" class="com.springinaction.springidol.Saxophone"/>

<!--    ____Объявление родителей и потомков компонентов(Абстрактные компоненты)____-->
<!--    Компоненты в фреймворке Spring также могут быть «подкомпонентами» других-->
<!--    компонентов-->

<!--    Для обеспечения «наследования» определений компонентов-->
<!--    в элементе <bean> могут указываться два специальных атрибута:-->
<!--    parent – определяет идентификатор компонента, который будет предком компонента с атрибутом parent.-->
<!--    Атрибут parent указывает, что компонент расширяет Java-класс;-->
<!--    abstract – если имеет значение true, указывает, что компонент-->
<!--    объявлен как абстрактный. То есть экземпляр такого компонента никогда не должен создаваться-->
<!--    фреймворком spring.-->

<!--    Чтобы показать возможности подкомпонентов, вернемся к конкурсу «Spring Idol».-->
<!--    Как вы наверное помните, Кенни был соперником тех, кто-->
<!--    выступал в соревновании как музыкант (Instrumentalist). В частности, специализацией Кенни является игра на саксофоне.-->
<!--    И был объявлен в Spring как компонент следующим образом:-->

<!--    <bean id="kenny"-->
<!--          class="com.springinaction.springidol.Instrumentalist">-->
<!--        <property name="song" value="Jingle Bells" />-->
<!--        <property name="instrument" ref="saxophone" />-->
<!--    </bean>-->

<!--    но представьте, что может произойти, если в конкурсе будут участвовать более-->
<!--    50 саксофонистов, которые все как один захотят исполнить одну и-->
<!--    ту же мелодию «Jingle Bells».-->



<!--    Решение – создать компонент, который будет родителем-->
<!--    для всех соперничающих саксофонистов. Компонент baseSaxophonist-->
<!--    должен будет исполнить следующий трюк:-->
    <bean id="baseSaxophonist"
          class="com.springinaction.springidol.Instrumentalist"
          abstract="true"
    >
        <property name="instrument" ref="saxophone"/>
        <property name="song" value="Jingle Bells"/>
    </bean>
<!--    Но обратите внимание на его атрибут-->
<!--    abstract со значением true. Он сообщает фреймворку Spring не пытаться-->
<!--    создавать экземпляр этого компонента.-->


<!--    Хотя экземпляр компонента baseSaxophonist нельзя создать, он все-->
<!--    еще очень полезен, потому что содержит общие свойства, присущие-->
<!--    Кенни и Давиду. Поэтому сейчас мы можем объявить компоненты-->
<!--    kenny и david, как показано ниже:-->
    <bean id="kenny" parent="baseSaxophonist"/>
    <bean id="david" parent="baseSaxophonist"/>
<!--    Атрибут parent свидетельствует, что оба компонента, kenny и david,-->
<!--    будут наследовать определение от компонента baseSaxophonist.-->


<!--    Здесь уместно упомянуть, что родительские компоненты могут-->
<!--    быть и неабстрактными. Разумеется, вполне возможно создать подкомпонент, -->
<!--    расширяющий конкретный компонент.-->

</beans>