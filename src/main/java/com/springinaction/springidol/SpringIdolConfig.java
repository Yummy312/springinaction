package com.springinaction.springidol;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;


@Configuration
public class SpringIdolConfig {


//    Предположим мы использовали элемент <bean> для объявления компонента типа Juggler с идентификатором duke
//    В конфигурации на языке Java приложения Spring Idol компонент duke можно определить как метод с аннотацией @Bean
//
//    Этот простой метод в конфигурации на языке Java является эквивалентом элемента <bean>, созданного ранее.
//    Аннотация @Bean сообщает фреймворку Spring, что данный метод вернет объект, который должен быть зарегистрирован
//    в контексте приложения Spring как компонент. Компонент получит идентификатор, совпадающий
//    с именем метода. Все операции, выполняемые внутри метода, в конечном итоге должны создавать компонент.
    @Bean
    public Performer duke() {
        return new Juggler();
    }
//    В данном случае объявление компонента выглядит очень просто.
//    Метод просто создает и возвращает экземпляр класса Juggler. Этот
//    объект будет зарегистрирован фреймворком Spring в контексте приложения с идентификатором duke.


}

